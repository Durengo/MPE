# S1 - STAGE ONE - STATIC VS SHARED LIBRARY
# BUILD MPE LIBRARY BASED ON SET LIBRARY TYPE

if(WIN32)
    include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/WIN32/S1/build_win32_s1.cmake")
elseif(COMPILATION_PLATFORM STREQUAL "UNIX")
    include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/UNIX/S1/build_unix_s1.cmake")
elseif(COMPILATION_PLATFORM STREQUAL "OSX")
    include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/OSX/S1/build_osx_s1.cmake")
elseif(COMPILATION_PLATFORM STREQUAL "RPI4")
    include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/RPI4/S1/build_rpi4_s1.cmake")
else()
    message(FATAL_ERROR "${COMPILATION_PLATFORM} NOT SUPPORTED.")
endif()

target_compile_definitions(MPE PUBLIC MPE_ENABLE_ASSERTS)
target_compile_definitions(MPE PUBLIC MPE_COMPILER_${CURRENT_COMPILER})

# ENABLE PROFILING FOR DEBUG BUILS
if(CMAKE_BUILD_TYPE STREQUAL Debug)
    target_compile_definitions(MPE PUBLIC MPE_CORE_DEBUG_PROFILING)
    target_compile_definitions(MPE PUBLIC MPE_DEBUG_PROFILING)
    target_compile_definitions(MPE PUBLIC MPE_ENABLE_DEBUG_LOG)
endif(CMAKE_BUILD_TYPE STREQUAL Debug)

target_compile_definitions(MPE PUBLIC MPE_FULL_VERSION_${PROJECT_FULL_VERSION})

# CMAKE IS NOT INHERETING COMPILER FLAGS PROPERLY
set(MPE_PUBLIC_DEFINITIONS)

if(MPE_LIBRARY_TYPE STREQUAL SHARED)
    list(APPEND MPE_PUBLIC_DEFINITIONS MPE_DYNAMIC_LIBRARY)
else()
    list(APPEND MPE_PUBLIC_DEFINITIONS MPE_STATIC_LIBRARY)
endif()

if(COMPILATION_PLATFORM STREQUAL "WIN32")
    list(APPEND MPE_PUBLIC_DEFINITIONS MPE_PLATFORM_WINDOWS)
elseif(COMPILATION_PLATFORM STREQUAL "UNIX")
    list(APPEND MPE_PUBLIC_DEFINITIONS MPE_PLATFORM_LINUX)
elseif(COMPILATION_PLATFORM STREQUAL "RPI4")
    list(APPEND MPE_PUBLIC_DEFINITIONS MPE_PLATFORM_LINUX MPE_PLATFORM_RPI4)
elseif(COMPILATION_PLATFORM STREQUAL "OSX")
    list(APPEND MPE_PUBLIC_DEFINITIONS MPE_PLATFORM_OSX)
endif()

list(APPEND MPE_PUBLIC_DEFINITIONS MPE_ENABLE_ASSERTS)
list(APPEND MPE_PUBLIC_DEFINITIONS MPE_COMPILER_${CURRENT_COMPILER})

if(CMAKE_BUILD_TYPE STREQUAL Debug)
    list(APPEND MPE_PUBLIC_DEFINITIONS MPE_CORE_DEBUG_PROFILING MPE_DEBUG_PROFILING MPE_ENABLE_DEBUG_LOG)
endif()

list(APPEND MPE_PUBLIC_DEFINITIONS MPE_FULL_VERSION_${PROJECT_FULL_VERSION})

if(${VERBOSE})
    get_target_property(DEFINITIONS_LIST MPE COMPILE_DEFINITIONS)
    message("
-----------------------------------------------------------
MPE COMPILE DEFINITIONS\n")

    foreach(DEFINITION ${DEFINITIONS_LIST})
        message(STATUS "${DEFINITION}")
    endforeach()

    message("
-----------------------------------------------------------")
endif()

target_compile_features(MPE PUBLIC ${CXX_VERSION_NAME})
set_target_properties(MPE PROPERTIES VERSION ${PROJECT_FULL_VERSION})

set_target_properties(MPE PROPERTIES OUTPUT_NAME "MPE")

# # MAKE SURE TO INCLUDE LIBRARY DIRECTORIES
# # target_include_directories(MPE
# # PRIVATE "${glad_DIR}/include"
# # PRIVATE "${imgui_DIR}"
# # )
# # if(${VERBOSE})
# # # PRINT INCLUDE DIRECTORIES
# # get_target_property(INCLUDE_DIRECTORIES MPE INCLUDE_DIRECTORIES)
# # message(STATUS "MPE INCLUDE DIRECTORIES: ${INCLUDE_DIRECTORIES}")
# # endif()

# S2 - STAGE TWO - LINKING LIBRARIES AND INCLUDING DIRECTORIES
if(WIN32)
    include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/WIN32/S2/build_win32_s2.cmake")
elseif(COMPILATION_PLATFORM STREQUAL "UNIX")
    include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/UNIX/S2/build_unix_s2.cmake")
elseif(COMPILATION_PLATFORM STREQUAL "OSX")
    include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/OSX/S2/build_osx_s2.cmake")
elseif(COMPILATION_PLATFORM STREQUAL "RPI4")
    include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/RPI4/S2/build_rpi4_s2.cmake")
else()
    message(FATAL_ERROR "${COMPILATION_PLATFORM} NOT SUPPORTED.")
endif()

# S3 - STAGE THREE - INSTALL PROPERTIES
if(WIN32)
    include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/WIN32/S3/build_win32_s3.cmake")
elseif(COMPILATION_PLATFORM STREQUAL "UNIX")
    include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/UNIX/S3/build_unix_s3.cmake")
elseif(COMPILATION_PLATFORM STREQUAL "OSX")
    include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/OSX/S3/build_osx_s3.cmake")
elseif(COMPILATION_PLATFORM STREQUAL "RPI4")
    include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/RPI4/S3/build_rpi4_s3.cmake")
else()
    message(FATAL_ERROR "${COMPILATION_PLATFORM} NOT SUPPORTED.")
endif()